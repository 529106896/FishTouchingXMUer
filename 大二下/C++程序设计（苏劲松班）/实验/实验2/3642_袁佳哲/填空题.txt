3. 什么是变量的生存期？C++中变量的生存期有哪几种？
    变量的生存期指程序运行时一个变量占有内存空间的时间段
    C++把变量的生存期分为：静态生存期、自动生存期、动态生存期

4. 区分标识符的作用域是为了什么？C++中的标识符有哪些作用域？
    区分标识符的作用于是为了规定每个作用域的有效范围，对标识符的可见性进行限制
    C++的标识符有：局部作用域、全局作用域、文件作用域、函数作用域、函数原型作用域、命名空间作用域、类作用域
    

6. 下面的宏cube1和函数cube2相比，各有什么优缺点？
   #define cube(x) ((x)*(x)*(x))
   double cube2(double x) { return x*x*x; }

   ①宏只需要编译，而函数还需要分配内存、值传递、返回等，当多次使用时，宏的效率比函数高
   ②但因为宏观只是简单的字符替换，多次替换展开后，会使程序变得很长
   ③带参的宏定义容易出现重复计算与歧义，得到错误的结果
   ④函数有实参、形参、返回值，debug比较方便；而宏都没有，如果宏内出现bug相对难以发现
    
14. 
    func('c',3.0);	调用void func(int,double);
    func(3L,3);		调用void func(long,double);
    func("three",3.0);	哪个都不调用，因为没有匹配的
    func(3L,'c');	有歧义，void func(long,double)与void func(int,char)
    func(true,3);       有歧义，void func(int,double)与void func(int,char)

15. 
    因为函数f与变量f的作用域不同，所以函数定义是正确的
    如果要使用变量f，直接写f
    如果要用函数，需要些::f()

16.
    由于内联函数名具有文件作用域，各个源文件中定义的同名内联函数属于不同的函数，为了防止同一个内联函数的各个定义之间的不一致，往往把内联函数的定义放在某个头文件中，在需要使用该内联函数的源文件中用文件包含命令“#include”把该头文件包含进来 
