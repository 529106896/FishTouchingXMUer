1.
C++中引进protected成员保护控制，缓解了数据封装与集成的矛盾。在基类中声明为protected可以被派生类使用，但不可以被基类的实例用户使用，这样能够对修改基类的内部实现所造成的影响范围进行控制。protected成员保护控制的引进使得类有两种接口：与实例用户的接口和与派生类用户的接口。

2.
类的继承方式决定了派生类的对象和派生类的派生类对基类成员的访问限制。
public继承方式使得基类的public成员可以被派生类的对象访问，他可以实现类之间的子类型关系

3.
虚函数的作用是允许在派生类中重新定义与基类同名的函数，并且可以通过基类指针或引用来访问基类和派生类中的同名函数。

4.
二义性是名冲突和重复集成
在多继承中，当多个基类中包含同名的成员时，他们在派生类中就会出现名冲突问题
在多继承中，如果直接基类有公共的基类，就会出现重复集成，这样，公共基类中的数据成员在多继承的派生类中就会有多个拷贝
解决名冲突的方法是用基类名受限
解决重复继承问题的方法是采用虚基类